import asyncio
import os
import yt_dlp
import numpy as np
import soundfile as sf
from shazamio import Shazam
from pydub import AudioSegment
import tempfile
from urllib.parse import urlparse, parse_qs

# === Config ===
URL = "https://youtu.be/7FInKGpf1tU?si=qEbbe3x62zZh-TYV&t=206"
SEGMENT_DURATION = 10  # seconds

# === Extract start time from URL if present ===
parsed = urlparse(URL)
qs = parse_qs(parsed.query)
START_TIME = int(qs.get("t", [0])[0].replace("s", ""))  # default 0
VIDEO_ID = qs.get("v", [parsed.path.split('/')[-1]])[0]
AUDIO_PATH = f"{VIDEO_ID}_{START_TIME}.m4a"

# === Download audio from start time ===
if not os.path.exists(AUDIO_PATH):
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": AUDIO_PATH,
        "postprocessors": [],
        "quiet": False,
        "download_sections": {f"*{START_TIME}-"}  # start from t=START_TIME
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([URL])
    print(f"[INFO] Audio downloaded from {START_TIME}s: {AUDIO_PATH}")
else:
    print(f"[INFO] Using existing audio: {AUDIO_PATH}")

# === Function to detect song from segments ===
async def detect_song_from_segments(segment_duration=10):
    shazam = Shazam()
    audio = AudioSegment.from_file(AUDIO_PATH)
    audio = audio.set_channels(1)  # mono
    samplerate = audio.frame_rate

    samples = np.array(audio.get_array_of_samples(), dtype=np.float32) / (2**15)
    total_samples = len(samples)
    total_duration = total_samples / samplerate

    for start in range(0, int(total_duration), segment_duration):
        end = min(start + segment_duration, total_duration)
        start_sample = int(start * samplerate)
        end_sample = int(end * samplerate)
        segment = samples[start_sample:end_sample]

        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
            sf.write(tmp.name, segment, samplerate)
            tmp_path = tmp.name

        try:
            result = await shazam.recognize(tmp_path)
        except Exception:
            result = {}

        os.unlink(tmp_path)

        if "track" in result:
            title = result["track"]["title"]
            artist = result["track"]["subtitle"]
            print(f"üé∂ Song detected: {title} - {artist}")
            return

    print("‚ùå No song detected in any segment.")

# === Run ===
asyncio.run(detect_song_from_segments(segment_duration=SEGMENT_DURATION))
